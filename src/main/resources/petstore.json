{
  "swagger" : "2.0",
  "host" : "192.168.6.213:8065",
  "basePath" : "/v2",
  "schemes" : [ "http" ],
  "paths" : {
    "/pet" : {
      "put" : {
        "description" : "",
        "operationId" : "updatePet",
        "summary" : "Update an existing pet",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "Pet object that needs to be added to the store",
          "required" : true,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/Pet"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      },
      "post" : {
        "description" : "",
        "operationId" : "addPet",
        "summary" : "Add a new pet to the store",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "Pet object that needs to be added to the store",
          "required" : true,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/Pet"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "description" : "",
        "operationId" : "getUserByName",
        "summary" : "Get user by user name",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "The name that needs to be fetched. Use user1 for testing. ",
          "required" : true,
          "in" : "path",
          "name" : "username",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "summary" : "Updated user",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "name that need to be updated",
          "required" : true,
          "in" : "path",
          "name" : "username",
          "type" : "string"
        }, {
          "description" : "Updated user object",
          "required" : true,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "summary" : "Delete user",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "The name that needs to be deleted",
          "required" : true,
          "in" : "path",
          "name" : "username",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/pet/findByStatus" : {
      "get" : {
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findPetsByStatus",
        "summary" : "Finds Pets by status",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "items" : {
            "type" : "string"
          },
          "in" : "query",
          "name" : "status",
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Pet"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      }
    },
    "/user/createWithList" : {
      "post" : {
        "description" : "",
        "operationId" : "createUsersWithListInput",
        "summary" : "Creates list of users with given input array",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "List of user object",
          "required" : true,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "items" : {
              "$ref" : "#/definitions/User"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/pet/{petId}/uploadImage" : {
      "post" : {
        "description" : "",
        "operationId" : "uploadFile",
        "summary" : "uploads an image",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "ID of pet to update",
          "format" : "int64",
          "required" : true,
          "in" : "path",
          "name" : "petId",
          "type" : "integer"
        }, {
          "description" : "Additional data to pass to server",
          "required" : false,
          "in" : "formData",
          "name" : "additionalMetadata",
          "type" : "string"
        }, {
          "description" : "file to upload",
          "required" : false,
          "in" : "formData",
          "name" : "file",
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "description" : "",
        "operationId" : "loginUser",
        "summary" : "Logs user into the system",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "The user name for login",
          "required" : true,
          "in" : "query",
          "name" : "username",
          "type" : "string"
        }, {
          "description" : "The password for login in clear text",
          "required" : true,
          "in" : "query",
          "name" : "password",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/store/inventory" : {
      "get" : {
        "description" : "Returns a map of status codes to quantities",
        "operationId" : "getInventory",
        "summary" : "Returns pet inventories by status",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/user" : {
      "post" : {
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "summary" : "Create user",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "Created user object",
          "required" : true,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/createWithArray" : {
      "post" : {
        "description" : "",
        "operationId" : "createUsersWithArrayInput",
        "summary" : "Creates list of users with given input array",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "List of user object",
          "required" : true,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "items" : {
              "$ref" : "#/definitions/User"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/pet/findByTags" : {
      "get" : {
        "description" : "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId" : "findPetsByTags",
        "summary" : "Finds Pets by tags",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "Tags to filter by",
          "required" : true,
          "items" : {
            "type" : "string"
          },
          "in" : "query",
          "name" : "tags",
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Pet"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Invalid tag value"
          }
        }
      }
    },
    "/store/order" : {
      "post" : {
        "description" : "",
        "operationId" : "placeOrder",
        "summary" : "Place an order for a pet",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "order placed for purchasing the pet",
          "required" : true,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/Order"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Order"
            }
          },
          "400" : {
            "description" : "Invalid Order"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "description" : "",
        "operationId" : "logoutUser",
        "summary" : "Logs out current logged in user session",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/pet/{petId}" : {
      "get" : {
        "description" : "Returns a single pet",
        "operationId" : "getPetById",
        "summary" : "Find pet by ID",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "ID of pet to return",
          "format" : "int64",
          "required" : true,
          "in" : "path",
          "name" : "petId",
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Pet"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        }
      },
      "post" : {
        "description" : "",
        "operationId" : "updatePetWithForm",
        "summary" : "Updates a pet in the store with form data",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "ID of pet that needs to be updated",
          "format" : "int64",
          "required" : true,
          "in" : "path",
          "name" : "petId",
          "type" : "integer"
        }, {
          "description" : "Updated name of the pet",
          "required" : false,
          "in" : "formData",
          "name" : "name",
          "type" : "string"
        }, {
          "description" : "Updated status of the pet",
          "required" : false,
          "in" : "formData",
          "name" : "status",
          "type" : "string"
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "delete" : {
        "description" : "",
        "operationId" : "deletePet",
        "summary" : "Deletes a pet",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "required" : false,
          "in" : "header",
          "name" : "api_key",
          "type" : "string"
        }, {
          "description" : "Pet id to delete",
          "format" : "int64",
          "required" : true,
          "in" : "path",
          "name" : "petId",
          "type" : "integer"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        }
      }
    },
    "/store/order/{orderId}" : {
      "get" : {
        "description" : "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId" : "getOrderById",
        "summary" : "Find purchase order by ID",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "ID of pet that needs to be fetched",
          "format" : "int64",
          "required" : true,
          "in" : "path",
          "name" : "orderId",
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Order"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      },
      "delete" : {
        "description" : "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId" : "deleteOrder",
        "summary" : "Delete purchase order by ID",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "description" : "ID of the order that needs to be deleted",
          "format" : "int64",
          "required" : true,
          "in" : "path",
          "name" : "orderId",
          "type" : "integer"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      }
    }
  },
  "definitions" : {
    "Order" : {
      "properties" : {
        "id" : {
          "format" : "int64",
          "type" : "integer"
        },
        "petId" : {
          "format" : "int64",
          "type" : "integer"
        },
        "quantity" : {
          "format" : "int32",
          "type" : "integer"
        },
        "shipDate" : {
          "format" : "date-time",
          "type" : "string"
        },
        "status" : {
          "description" : "Order Status",
          "type" : "string"
        },
        "complete" : {
          "default" : false,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "Category" : {
      "properties" : {
        "id" : {
          "format" : "int64",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "User" : {
      "properties" : {
        "id" : {
          "format" : "int64",
          "type" : "integer"
        },
        "username" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "userStatus" : {
          "description" : "User Status",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "Tag" : {
      "properties" : {
        "id" : {
          "format" : "int64",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Pet" : {
      "required" : [ "name", "photoUrls" ],
      "properties" : {
        "id" : {
          "format" : "int64",
          "type" : "integer"
        },
        "category" : {
          "$ref" : "#/definitions/Category"
        },
        "name" : {
          "example" : "doggie",
          "type" : "string"
        },
        "photoUrls" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "tags" : {
          "items" : {
            "$ref" : "#/definitions/Tag"
          },
          "type" : "array"
        },
        "status" : {
          "description" : "pet status in the store",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "ApiResponse" : {
      "properties" : {
        "code" : {
          "format" : "int32",
          "type" : "integer"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "type" : "object"
    }
  },
  "info" : {
    "title" : "petstore",
    "description" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version" : "1.0.0"
  },
  "x-axway" : {
    "corsEnabled" : true,
    "basePaths" : [ "" ],
    "serviceType" : "rest",
    "deprecated" : false,
    "tags" : { }
  }
}